from vk_api.bot_longpoll import VkBotEventType
from src.vk_chat_bot.vk.manager import VKGroupManage
from src.vk_chat_bot.config import GROUP_ACCESS_TOKEN_VK, GROUP_ID, oauth_link


class VKLaunchGroup(VKGroupManage):
    def start(self):
        for event in self.long_poll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW:
                user_id = event.obj['message']['peer_id']
                user_firstname = self._get_firstname(user_id)
                text_msg = event.obj['message']['text'].strip().lower()
                print(f"New msg from {user_id}, text: {text_msg} ")

                if text_msg not in VKLaunchGroup.COMMANDS and \
                        text_msg.split()[0] not in {'/dob', '/from', '/gender', '/re'}:
                    self._unknown_command(user_id, text_msg)

                user_exist = self.userapp_token.check_user(user_id)
                user_token = self.userapp_token.get_user_token(user_id)
                step = self.userapp_token.get_step(user_id)
                start = text_msg in {'start', '–Ω–∞—á–∞—Ç—å'}
                search = text_msg in {'search', '–ø–æ–∏—Å–∫'}
                next_ = text_msg in {'next', '—Å–ª–µ–¥—É—é—â–∏–π'}

                if start and user_exist is False:
                    self._send_msg_sign_up(user_id, user_firstname)

                if start and user_exist and step == 0:
                    self._send_msg_signed_in(user_id, user_firstname)

                if text_msg == '–Ω—É...–¥–∞–≤–∞–π –ø–æ–∑–∂–µ üòî' and user_exist and step == 0:
                    self._send_bye(user_id, user_firstname)
                if text_msg == '–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üêº' and user_exist and step == 0:
                    self._get_acquaintance(user_token)
                    self._re_check(user_id)
                if text_msg.split()[0] == '/dob' and user_exist and step == 0:
                    txt_c = len(text_msg.split()) == 2
                    if txt_c:
                        self._c_dob(user_id, text_msg.split()[1])
                        self._re_check(user_id)
                if text_msg.split()[0] == '/from' and user_exist and step == 0:
                    txt_c = len(text_msg.split()) == 3
                    if txt_c:
                        self._c_city(user_id, text_msg.split()[1], text_msg.split()[2])
                        self._re_check(user_id)
                if text_msg.split()[0] == '/gender' and user_exist and step == 0:
                    txt_c = len(text_msg.split()) == 2
                    if txt_c:
                        self._c_gender(user_id, text_msg.split()[1])
                        self._re_check(user_id)
                if text_msg.split()[0] == '/re' and user_exist and step == 0:
                    txt_c = len(text_msg.split()) == 2
                    if txt_c:
                        self._c_relation(user_id, text_msg.split()[1])
                        self._re_check(user_id)

                if start and user_exist and step == 1:
                    self._send_msg(user_id, '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É üêº')
                    self._ask_to_move_msg(user_id)

                if (search or next_) and user_exist and step == 1:
                    self._search_or_next(user_id, user_token, user_firstname)
                    self._ask_to_move_msg(user_id)

                if text_msg in {'–¥–æ–±. –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'} and user_exist and step == 1:
                    self._move_to_fav(user_id)
                    self._send_msg(user_id, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚≠ê\n–∏–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫...Ô∏è')
                    self._search_or_next(user_id, user_token, user_firstname)

                if text_msg in {'–¥–æ–±. –≤ —á—Å'} and user_exist and step == 1:
                    self._move_to_black(user_id)
                    self._send_msg(user_id, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üåö\n–∏–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫...')
                    self._search_or_next(user_id, user_token, user_firstname)


if __name__ == '__main__':
    test = VKLaunchGroup(GROUP_ACCESS_TOKEN_VK, GROUP_ID, oauth_link)
    test.start()
