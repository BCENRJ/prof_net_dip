import vk_api
import datetime as dt
import flag
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id
from src.vk_chat_bot.db.database import UserAppToken, UserApp, session
from src.vk_chat_bot.vk.vkontakte import VKinderUser


class VKGroupManage:
    def __init__(self, vk_group_token, group_id, oauth_link):
        self.vk = vk_api.VkApi(token=vk_group_token)
        self.long_poll = VkBotLongPoll(self.vk, group_id=group_id)
        self.vk_api = self.vk.get_api()
        self.userapp_token = UserAppToken(session)
        self.user_app = UserApp(session)
        self.oauth_link = oauth_link
        self.u_vk_api = None

    def _get_firstname(self, user_id):
        return self.vk_api.users.get(user_ids=user_id)[0]['first_name']

    # Messaging
    def _send_msg(self, peer_id, message) -> None:
        self.vk_api.messages.send(peer_id=peer_id, message=message, keyboard=None,
                                  random_id=get_random_id())

    def _send_msg_sign_up(self, peer_id, usr_name) -> None:
        message = f'–•–∞—é-–•–∞–π üêç {usr_name}, –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É "sign up üìù" –∏ ' \
                  f'–≤—ã–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ üêº –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É "start" '
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_openlink_button(label='sign up üìù', link=self.oauth_link)
        keyboard.add_button('start', color=VkKeyboardColor.POSITIVE)
        self.vk_api.messages.send(peer_id=peer_id, message=message, keyboard=keyboard.get_keyboard(),
                                  random_id=get_random_id())

    def _send_msg_signed_in(self, peer_id, message) -> None:
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üêº ', color=VkKeyboardColor.POSITIVE)
        keyboard.add_line()
        keyboard.add_button('–Ω—É...–¥–∞–≤–∞–π –ø–æ–∑–∂–µ üòî', color=VkKeyboardColor.NEGATIVE)
        self.vk_api.messages.send(peer_id=peer_id, message=message, keyboard=keyboard.get_keyboard(),
                                  random_id=get_random_id())

    def _send_bye(self, peer_id, usr_name) -> None:
        message = f'{usr_name}, –≥—É–¥ –±–∞–π  –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—è —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞–≤ -> start –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –∏–∑ –º–µ–Ω—é —á–∞—Ç–∞'
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('start', color=VkKeyboardColor.SECONDARY)
        self.vk_api.messages.send(peer_id=peer_id, message=message, keyboard=keyboard.get_keyboard(),
                                  random_id=get_random_id())

    def _ask_gender_msg(self, peer_id, message) -> None:
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–¥–µ–≤—É—à–∫–∞', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('–ø–∞—Ä–µ–Ω—å', color=VkKeyboardColor.SECONDARY)
        self.vk_api.messages.send(peer_id=peer_id, message=message, keyboard=keyboard.get_keyboard(),
                                  random_id=get_random_id())

    def _ask_relation_msg(self, peer_id):
        message = ('–í–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 - 8\n\n1 - –Ω–µ –∂–µ–Ω–∞—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º\n'
                   '2 - –µ—Å—Ç—å –¥—Ä—É–≥/–µ—Å—Ç—å –ø–æ–¥—Ä—É–≥–∞\n3 - –ø–æ–º–æ–ª–≤–ª–µ–Ω/–ø–æ–º–æ–ª–≤–ª–µ–Ω–∞\n4 - –∂–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º\n5 - –≤—Å—ë —Å–ª–æ–∂–Ω–æ\n'
                   '6 - –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ\n7 - –≤–ª—é–±–ª—ë–Ω/–≤–ª—é–±–ª–µ–Ω–∞\n8 - –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ')

        self.vk_api.messages.send(peer_id=peer_id, message=message, keyboard=None,
                                  random_id=get_random_id())

    def _ask_to_search_msg(self, peer_id, message) -> None:
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–¥–∞', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('–Ω–µ—Ç', color=VkKeyboardColor.SECONDARY)
        self.vk_api.messages.send(peer_id=peer_id, message=message, keyboard=keyboard.get_keyboard(),
                                  random_id=get_random_id())

    def _ask_to_move_msg(self, peer_id, message) -> None:
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button('—Å–ª–µ–¥—É—é—â–∏–π', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–¥–æ–±. –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', color=VkKeyboardColor.POSITIVE)
        keyboard.add_line()
        keyboard.add_button('–¥–æ–±. –≤ —á—Å', color=VkKeyboardColor.NEGATIVE)
        keyboard.add_line()
        keyboard.add_button('–≤—ã—Ö–æ–¥', color=VkKeyboardColor.SECONDARY)
        self.vk_api.messages.send(peer_id=peer_id, message=message, keyboard=keyboard.get_keyboard(),
                                  random_id=get_random_id())

    def _acquaintance(self, u_id, firstname):
        self._send_msg_signed_in(u_id, f'{firstname}, –º—ã –≤—Å–µ –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã... –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è? üêº\n'
                                       f'(–Ω—É–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É)')
        for further_event in self.long_poll.listen():
            if further_event.type == VkBotEventType.MESSAGE_NEW:
                if u_id == further_event.obj['message']['peer_id']:
                    answer = further_event.obj['message']['text']
                    if answer == '–Ω—É...–¥–∞–≤–∞–π –ø–æ–∑–∂–µ üòî':
                        self._send_bye(u_id, firstname)
                        return False
                    elif answer == '–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üêº':
                        return True
                    else:
                        self._send_msg(u_id, '–ù–µ –æ—á–µ–Ω—å –≤–∞—Å –ø–æ–Ω–∏–º–∞—é...')
                        return self._acquaintance(u_id, firstname)

    def _get_acquainted(self, u_id, u_token):
        user = VKinderUser(u_token).get_info()
        if user['dob'] is None or len(user['dob'].split('.')) != 3 or not 1942 <= int(user['dob'].split('.')[2]) < 2014:
            user['dob'] = self._ask_dob(u_id)
        if user['city'] is None:
            user['city'] = self._ask_city(u_id)
        if user['gender'] == 0:
            user['gender'] = self._ask_gender(u_id)
        if user['relation'] == 0:
            user['relation'] = self._ask_relation(u_id)
        self.user_app.add_user(vk_id=user['id'], firstname=user['firstname'], lastname=user['lastname'],
                               dob=user['dob'], gender=user['gender'], city=user['city'], relation=user['relation'])
        return True

    def _ask_dob(self, u_id):
        self._send_msg(u_id, '–ù–∞–ø–∏—à—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: -> D.M.YYYY (–æ—Ç 9 –¥–æ 80 –ª–µ—Ç –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è) ')
        for further_event in self.long_poll.listen():
            if further_event.type == VkBotEventType.MESSAGE_NEW:
                if u_id == further_event.obj['message']['peer_id']:
                    answer = further_event.obj['message']['text'].strip()
                    if '.' in answer:
                        num = answer.split('.')
                        if len(num) == 3:
                            d, m, y = num[0], num[1], num[2]
                            if d.isdigit() and m.isdigit() and y.isdigit():
                                if 1 <= int(d) <= 31 and 1 <= int(m) <= 12 and 1942 <= int(y) <= 2013:
                                    return answer
                    self._send_msg(u_id, '–î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–µ–Ω–æ')
                    return self._ask_dob(u_id)

    def _get_city_id(self, u_id, c_id):
        self._send_msg(u_id, '–∞ –∏–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?\n–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–µ–Ω–æ —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ => "q" –≤ –æ—Ç–≤–µ—Ç')
        for further_event in self.long_poll.listen():
            if further_event.type == VkBotEventType.MESSAGE_NEW:
                if u_id == further_event.obj['message']['peer_id']:
                    answer = further_event.obj['message']['text']
                    if answer.lower() == 'q':
                        self._ask_city(u_id)
                    data = self.u_vk_api.database.getCities(country_id=c_id, q=answer, count=3)['items']
                    for n, elem in enumerate(data):
                        self._send_msg(u_id, f"‚Ññ {n + 1}: –≥–æ—Ä–æ–¥: {elem['title']}\n"
                                             f"{elem.get('area', '')} {elem.get('region', '')}")
                    n = self._city_c(u_id)
                    return data[n-1]['id']

    def _city_c(self, u_id):
        self._send_msg(u_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π ‚Ññ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \n‚Ññ –æ—Ç 1 - 3')
        for further_event in self.long_poll.listen():
            if further_event.type == VkBotEventType.MESSAGE_NEW:
                if u_id == further_event.obj['message']['peer_id']:
                    answer = further_event.obj['message']['text']
                    if answer.isdigit() and int(answer) in range(1, 4):
                        return int(answer)
                    self._send_msg(u_id, '–ù–µ–≤–µ—Ä–Ω–æ')
                    return self._city_c(u_id)

    def _ask_city(self, u_id):
        self._send_msg(u_id, '–û—Ç–∫—É–¥–∞ –≤—ã? (–∏–∑ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ => RU,UA,BY,UZ –∏–ª–∏ '
                             '–º–æ–∂–µ—Ç–µ —Å–∫–∏–Ω—É—Ç—å —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã =>  üá∑üá∫üá∫üá¶üáßüáæüá∫üáø')
        vk = vk_api.VkApi(token=self.userapp_token.get_user_token(u_id))
        self.u_vk_api = vk.get_api()
        for further_event in self.long_poll.listen():
            if further_event.type == VkBotEventType.MESSAGE_NEW:
                if u_id == further_event.obj['message']['peer_id']:
                    answer = further_event.obj['message']['text']
                    c_flag = flag.dflagize(f"{answer.strip()}", subregions=True)
                    country = self.u_vk_api.database.getCountries(code=c_flag)
                    c_id = country['items'][0]['id']
                    if c_id != 0:
                        self._send_msg(u_id, f"{country['items'][0]['title']} üëç")
                        return self._get_city_id(u_id, c_id)
                    self._send_msg(u_id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
                    return self._ask_city(u_id)

    def _ask_gender(self, u_id):
        self._ask_gender_msg(u_id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª?')
        for further_event in self.long_poll.listen():
            if further_event.type == VkBotEventType.MESSAGE_NEW:
                if u_id == further_event.obj['message']['peer_id']:
                    answer = further_event.obj['message']['text']
                    if answer.lower() == '–¥–µ–≤—É—à–∫–∞':
                        return 1
                    elif answer.lower() == '–ø–∞—Ä–µ–Ω—å':
                        return 2
                    self._send_msg(u_id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª (–¥–µ–≤—É—à–∫–∞ / –ø–∞—Ä–µ–Ω—å)')
                    return self._ask_gender(u_id)

    def _ask_relation(self, u_id):
        self._ask_relation_msg(u_id)
        for further_event in self.long_poll.listen():
            if further_event.type == VkBotEventType.MESSAGE_NEW:
                if u_id == further_event.obj['message']['peer_id']:
                    answer = further_event.obj['message']['text']
                    if answer.isdigit() and int(answer) in range(1, 9):
                        return int(answer)
                    self._send_msg(u_id, '–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ')
                    return self._ask_relation(u_id)

    def _ask_to_search(self, u_id, usr_name):
        self._ask_to_search_msg(u_id, f'{usr_name}, üêº –ø–µ—Ä–µ–π–¥–µ–º –∫ –ø–æ–∏—Å–∫—É?')
        for further_event in self.long_poll.listen():
            if further_event.type == VkBotEventType.MESSAGE_NEW:
                if u_id == further_event.obj['message']['peer_id']:
                    answer = further_event.obj['message']['text']
                    if answer.lower() == '–¥–∞':
                        self._send_msg(u_id, '–ò–¥–µ—Ç –ø–æ–∏—Å–∫...')
                        return True
                    elif answer.lower() == '–Ω–µ—Ç':
                        self._send_bye(u_id, usr_name)
                        return False
                    self._send_msg(u_id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
                    return self._ask_to_search(u_id, usr_name)

    def _ask_to_move(self, u_id):
        self._ask_to_move_msg(u_id, 'üêºü•∞')
        for further_event in self.long_poll.listen():
            if further_event.type == VkBotEventType.MESSAGE_NEW:
                if u_id == further_event.obj['message']['peer_id']:
                    answer = further_event.obj['message']['text']
                    if answer.lower() == '—Å–ª–µ–¥—É—é—â–∏–π':
                        return 1
                    elif answer.lower() == '–¥–æ–±. –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
                        return 2
                    elif answer.lower() == '–¥–æ–±. –≤ —á—Å':
                        return 3
                    elif answer.lower() == '–≤—ã—Ö–æ–¥':
                        return 4
                    self._send_msg(u_id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
                    return self._ask_to_move(u_id)

    def _generate_user(self, u_id, name, usr_search_list, usr_cook, search_engine):
        if usr_search_list.check_users_existence() is None:
            self._send_msg(u_id, f'{name}, –∏—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ '
                                 f'–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤...')
            usr = self.user_app.get_user(u_id)
            search_engine.search_users_n_add_to_db(age=dt.datetime.now().year - usr.dob.year,
                                                   gender=usr.gender, city=usr.city, relation=usr.relation)
        if usr_search_list.check_users_existence() is None:
            self._send_msg(u_id, f'{name}, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ... –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —á—É—Ç—å –ø–æ–∑–∂–µüòì')
            return None

        r_usr = usr_search_list.select_random_row()
        attach = usr_cook.get_user_photos(r_usr.vk_usr_id)
        if len(attach) != 3:
            usr_search_list.move_user_to_archive(r_usr.vk_usr_id)
            return self._generate_user(u_id, name, usr_search_list, usr_cook, search_engine)
        self._send_msg(u_id, f'{name}, —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üêº')
        self.vk_api.messages.send(peer_id=u_id, message=f'[id{r_usr.vk_usr_id}|{r_usr.firstname} {r_usr.lastname}]',
                                  attachment=attach, random_id=get_random_id())
        return r_usr.vk_usr_id


if __name__ == '__main__':
    pass
